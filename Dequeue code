#include <stdio.h>

#define MAX_SIZE 100

typedef struct {
    int data[MAX_SIZE];
    int front, rear;
} Dequeue;

void initializeDequeue(Dequeue *dq) {
    dq->front = -1;
    dq->rear = -1;
}

int isEmpty(Dequeue *dq) {
    return (dq->front == -1);
}

int isFull(Dequeue *dq) {
    return ((dq->front == 0 && dq->rear == MAX_SIZE - 1) || (dq->front == dq->rear + 1));
}

void insertFront(Dequeue *dq, int value) {
    if (isFull(dq)) {
        printf("Dequeue is full. Cannot insert.\n");
        return;
    }
    if (isEmpty(dq)) {
        dq->front = dq->rear = 0;
    } else if (dq->front == 0) {
        dq->front = MAX_SIZE - 1;
    } else {
        dq->front--;
    }
    dq->data[dq->front] = value;
}

void insertRear(Dequeue *dq, int value) {
    if (isFull(dq)) {
        printf("Dequeue is full. Cannot insert.\n");
        return;
    }
    if (isEmpty(dq)) {
        dq->front = dq->rear = 0;
    } else if (dq->rear == MAX_SIZE - 1) {
        dq->rear = 0;
    } else {
        dq->rear++;
    }
    dq->data[dq->rear] = value;
}

int deleteFront(Dequeue *dq) {
    if (isEmpty(dq)) {
        printf("Dequeue is empty. Cannot delete.\n");
        return -1;
    }
    int value = dq->data[dq->front];
    if (dq->front == dq->rear) {
        dq->front = dq->rear = -1;
    } else {
        if (dq->front == MAX_SIZE - 1) {
            dq->front = 0;
        } else {
            dq->front++;
        }
    }
    return value;
}

int deleteRear(Dequeue *dq) {
    if (isEmpty(dq)) {
        printf("Dequeue is empty. Cannot delete.\n");
        return -1;
    }
    int value = dq->data[dq->rear];
    if (dq->front == dq->rear) {
        dq->front = dq->rear = -1;
    } else if (dq->rear == 0) {
        dq->rear = MAX_SIZE - 1;
    } else {
        dq->rear--;
    }
    return value;
}

int main() {
    Dequeue dq;
    initializeDequeue(&dq);

    insertFront(&dq, 1);
    insertFront(&dq, 2);
    insertRear(&dq, 3);
    insertRear(&dq, 4);

    printf("Front element: %d\n", deleteFront(&dq));
    printf("Rear element: %d\n", deleteRear(&dq));

    return 0;
}
